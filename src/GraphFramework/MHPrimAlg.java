/*
CPCS324 Group Project | Phase1 | Section B9B
- Reem Saleh Almalki            2005439
- Roaa Hatim Altunsi            1914946
- Shahad Maher Magram           2010332
- Seham Khaldoun Nahlawi        1915762
 */

package GraphFramework;

public class MHPrimAlg extends MSTAlgorithm{

    // CONSTRUCTOR
    public MHPrimAlg(Graph graph) {
        super(graph);
    }

    // METHODS
    @Override
    public void displayResultingMST() {
        
        //-------------------------- Generate MST ------------------------------    
        // Initialize set of visitid vertices with a single vertex
        graph.vertices[0].isVisited = true;
        
        // Needed variables
        int min, cost = 0;
        Vertex vertex;
        Edge currentEdge, minEdge;
        
        // Generate MST
        for(int i=0; i<graph.verticesNo-1; i++){ // Iterates |V|-1 times
        
            minEdge = null;
            min = Integer.MAX_VALUE;
        
            // Iterates through all vertices
            for(int j=0; j<graph.verticesNo; j++){ 
        
                // Make sure the vertex belongs to list of visited vertices 
                vertex = graph.vertices[j];
                if(vertex.isVisited){
        
                    // Search in all adjVertices
                    for(int k=0; k<vertex.adjList.size(); k++){
                        
                        currentEdge = vertex.adjList.get(k);
                        if(!currentEdge.target.isVisited 
                            && currentEdge.weight<min){
                            // Choose the minimum cost edge of all of them
                            minEdge = currentEdge;
                            min = minEdge.weight;
                        }  
                    } // End loop
                }  
            } // End loop
        
            // Add the new edge to set of result edges 
            if(minEdge != null){
                minEdge.target.isVisited = true;
                MSTResultList.add(minEdge);
                cost += minEdge.weight;
            } 
            
        } // End loop
        
        
        //-------------------------- Display MST -------------------------------
        System.out.println("The phone network (minimum spanning tree) "
                            + "generated by min-heap based Prim algorithm is as follows:");  
        for (Edge obj : MSTResultList)
            obj.displayInfo();
        System.out.println("The cost of designed phone network: " + cost);
  
    }
    
}
